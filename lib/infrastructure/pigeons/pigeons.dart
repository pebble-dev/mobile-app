// Autogenerated from Pigeon (v0.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class ListOfPebbleDevices {
  List list;

  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['list'] = list;
    return pigeonMap;
  }

  // ignore: unused_element
  static ListOfPebbleDevices _fromMap(Map<dynamic, dynamic> pigeonMap) {
    if (pigeonMap == null) {
      return null;
    }
    final ListOfPebbleDevices result = ListOfPebbleDevices();
    result.list = pigeonMap['list'];
    return result;
  }
}

class ScanControl {
  Future<void> startScan() async {
    const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
        'dev.flutter.pigeon.ScanControl.startScan', StandardMessageCodec());

    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
          code: 'channel-error',
          message: 'Unable to establish connection on channel.',
          details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
  }
}

abstract class ScanCallbacks {
  void onScanUpdate(ListOfPebbleDevices arg);

  void onScanStarted();

  void onScanStopped();

  static void setup(ScanCallbacks api) {
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.ScanCallbacks.onScanUpdate',
          StandardMessageCodec());
      channel.setMessageHandler((dynamic message) async {
        final Map<dynamic, dynamic> mapMessage =
            message as Map<dynamic, dynamic>;
        final ListOfPebbleDevices input =
            ListOfPebbleDevices._fromMap(mapMessage);
        api.onScanUpdate(input);
      });
    }
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.ScanCallbacks.onScanStarted',
          StandardMessageCodec());
      channel.setMessageHandler((dynamic message) async {
        api.onScanStarted();
      });
    }
    {
      const BasicMessageChannel<dynamic> channel = BasicMessageChannel<dynamic>(
          'dev.flutter.pigeon.ScanCallbacks.onScanStopped',
          StandardMessageCodec());
      channel.setMessageHandler((dynamic message) async {
        api.onScanStopped();
      });
    }
  }
}
