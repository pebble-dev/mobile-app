// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class StringWrapper {
  String value;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static StringWrapper decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return StringWrapper()
      ..value = pigeonMap['value'] as String;
  }
}

class ListWrapper {
  List<Object> value;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static ListWrapper decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return ListWrapper()
      ..value = pigeonMap['value'] as List<Object>;
  }
}

class NumberWrapper {
  int value;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static NumberWrapper decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return NumberWrapper()
      ..value = pigeonMap['value'] as int;
  }
}

class TimelinePinPigeon {
  String itemId;
  String parentId;
  int timestamp;
  int type;
  int duration;
  bool isVisible;
  bool isFloating;
  bool isAllDay;
  bool persistQuickView;
  int layout;
  String attributesJson;
  String actionsJson;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['itemId'] = itemId;
    pigeonMap['parentId'] = parentId;
    pigeonMap['timestamp'] = timestamp;
    pigeonMap['type'] = type;
    pigeonMap['duration'] = duration;
    pigeonMap['isVisible'] = isVisible;
    pigeonMap['isFloating'] = isFloating;
    pigeonMap['isAllDay'] = isAllDay;
    pigeonMap['persistQuickView'] = persistQuickView;
    pigeonMap['layout'] = layout;
    pigeonMap['attributesJson'] = attributesJson;
    pigeonMap['actionsJson'] = actionsJson;
    return pigeonMap;
  }

  static TimelinePinPigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return TimelinePinPigeon()
      ..itemId = pigeonMap['itemId'] as String
      ..parentId = pigeonMap['parentId'] as String
      ..timestamp = pigeonMap['timestamp'] as int
      ..type = pigeonMap['type'] as int
      ..duration = pigeonMap['duration'] as int
      ..isVisible = pigeonMap['isVisible'] as bool
      ..isFloating = pigeonMap['isFloating'] as bool
      ..isAllDay = pigeonMap['isAllDay'] as bool
      ..persistQuickView = pigeonMap['persistQuickView'] as bool
      ..layout = pigeonMap['layout'] as int
      ..attributesJson = pigeonMap['attributesJson'] as String
      ..actionsJson = pigeonMap['actionsJson'] as String;
  }
}

class BooleanWrapper {
  bool value;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static BooleanWrapper decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return BooleanWrapper()
      ..value = pigeonMap['value'] as bool;
  }
}

class InstallData {
  String uri;
  PbwAppInfo appInfo;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['uri'] = uri;
    pigeonMap['appInfo'] = appInfo == null ? null : appInfo.encode();
    return pigeonMap;
  }

  static InstallData decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return InstallData()
      ..uri = pigeonMap['uri'] as String
      ..appInfo = pigeonMap['appInfo'] != null ? PbwAppInfo.decode(pigeonMap['appInfo']) : null;
  }
}

class PbwAppInfo {
  bool isValid;
  String uuid;
  String shortName;
  String longName;
  String companyName;
  int versionCode;
  String versionLabel;
  Map<Object, Object> appKeys;
  List<Object> capabilities;
  List<Object> resources;
  String sdkVersion;
  List<Object> targetPlatforms;
  WatchappInfo watchapp;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['isValid'] = isValid;
    pigeonMap['uuid'] = uuid;
    pigeonMap['shortName'] = shortName;
    pigeonMap['longName'] = longName;
    pigeonMap['companyName'] = companyName;
    pigeonMap['versionCode'] = versionCode;
    pigeonMap['versionLabel'] = versionLabel;
    pigeonMap['appKeys'] = appKeys;
    pigeonMap['capabilities'] = capabilities;
    pigeonMap['resources'] = resources;
    pigeonMap['sdkVersion'] = sdkVersion;
    pigeonMap['targetPlatforms'] = targetPlatforms;
    pigeonMap['watchapp'] = watchapp == null ? null : watchapp.encode();
    return pigeonMap;
  }

  static PbwAppInfo decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return PbwAppInfo()
      ..isValid = pigeonMap['isValid'] as bool
      ..uuid = pigeonMap['uuid'] as String
      ..shortName = pigeonMap['shortName'] as String
      ..longName = pigeonMap['longName'] as String
      ..companyName = pigeonMap['companyName'] as String
      ..versionCode = pigeonMap['versionCode'] as int
      ..versionLabel = pigeonMap['versionLabel'] as String
      ..appKeys = pigeonMap['appKeys'] as Map<Object, Object>
      ..capabilities = pigeonMap['capabilities'] as List<Object>
      ..resources = pigeonMap['resources'] as List<Object>
      ..sdkVersion = pigeonMap['sdkVersion'] as String
      ..targetPlatforms = pigeonMap['targetPlatforms'] as List<Object>
      ..watchapp = pigeonMap['watchapp'] != null ? WatchappInfo.decode(pigeonMap['watchapp']) : null;
  }
}

class WatchappInfo {
  bool watchface;
  bool hiddenApp;
  bool onlyShownOnCommunication;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['watchface'] = watchface;
    pigeonMap['hiddenApp'] = hiddenApp;
    pigeonMap['onlyShownOnCommunication'] = onlyShownOnCommunication;
    return pigeonMap;
  }

  static WatchappInfo decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return WatchappInfo()
      ..watchface = pigeonMap['watchface'] as bool
      ..hiddenApp = pigeonMap['hiddenApp'] as bool
      ..onlyShownOnCommunication = pigeonMap['onlyShownOnCommunication'] as bool;
  }
}

class NotificationPigeon {
  String packageId;
  int notifId;
  String appName;
  String tagId;
  String tagName;
  String title;
  String text;
  String category;
  int color;
  String messagesJson;
  String actionsJson;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['packageId'] = packageId;
    pigeonMap['notifId'] = notifId;
    pigeonMap['appName'] = appName;
    pigeonMap['tagId'] = tagId;
    pigeonMap['tagName'] = tagName;
    pigeonMap['title'] = title;
    pigeonMap['text'] = text;
    pigeonMap['category'] = category;
    pigeonMap['color'] = color;
    pigeonMap['messagesJson'] = messagesJson;
    pigeonMap['actionsJson'] = actionsJson;
    return pigeonMap;
  }

  static NotificationPigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return NotificationPigeon()
      ..packageId = pigeonMap['packageId'] as String
      ..notifId = pigeonMap['notifId'] as int
      ..appName = pigeonMap['appName'] as String
      ..tagId = pigeonMap['tagId'] as String
      ..tagName = pigeonMap['tagName'] as String
      ..title = pigeonMap['title'] as String
      ..text = pigeonMap['text'] as String
      ..category = pigeonMap['category'] as String
      ..color = pigeonMap['color'] as int
      ..messagesJson = pigeonMap['messagesJson'] as String
      ..actionsJson = pigeonMap['actionsJson'] as String;
  }
}

class AppEntriesPigeon {
  List<Object> appName;
  List<Object> packageId;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['appName'] = appName;
    pigeonMap['packageId'] = packageId;
    return pigeonMap;
  }

  static AppEntriesPigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return AppEntriesPigeon()
      ..appName = pigeonMap['appName'] as List<Object>
      ..packageId = pigeonMap['packageId'] as List<Object>;
  }
}

class NotifActionExecuteReq {
  String itemId;
  int actionId;
  String responseText;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['itemId'] = itemId;
    pigeonMap['actionId'] = actionId;
    pigeonMap['responseText'] = responseText;
    return pigeonMap;
  }

  static NotifActionExecuteReq decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return NotifActionExecuteReq()
      ..itemId = pigeonMap['itemId'] as String
      ..actionId = pigeonMap['actionId'] as int
      ..responseText = pigeonMap['responseText'] as String;
  }
}

class PebbleScanDevicePigeon {
  String name;
  int address;
  String version;
  String serialNumber;
  int color;
  bool runningPRF;
  bool firstUse;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['name'] = name;
    pigeonMap['address'] = address;
    pigeonMap['version'] = version;
    pigeonMap['serialNumber'] = serialNumber;
    pigeonMap['color'] = color;
    pigeonMap['runningPRF'] = runningPRF;
    pigeonMap['firstUse'] = firstUse;
    return pigeonMap;
  }

  static PebbleScanDevicePigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return PebbleScanDevicePigeon()
      ..name = pigeonMap['name'] as String
      ..address = pigeonMap['address'] as int
      ..version = pigeonMap['version'] as String
      ..serialNumber = pigeonMap['serialNumber'] as String
      ..color = pigeonMap['color'] as int
      ..runningPRF = pigeonMap['runningPRF'] as bool
      ..firstUse = pigeonMap['firstUse'] as bool;
  }
}

class WatchResource {
  String file;
  bool menuIcon;
  String name;
  String type;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['file'] = file;
    pigeonMap['menuIcon'] = menuIcon;
    pigeonMap['name'] = name;
    pigeonMap['type'] = type;
    return pigeonMap;
  }

  static WatchResource decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return WatchResource()
      ..file = pigeonMap['file'] as String
      ..menuIcon = pigeonMap['menuIcon'] as bool
      ..name = pigeonMap['name'] as String
      ..type = pigeonMap['type'] as String;
  }
}

class WatchConnectionStatePigeon {
  bool isConnected;
  bool isConnecting;
  int currentWatchAddress;
  PebbleDevicePigeon currentConnectedWatch;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['isConnected'] = isConnected;
    pigeonMap['isConnecting'] = isConnecting;
    pigeonMap['currentWatchAddress'] = currentWatchAddress;
    pigeonMap['currentConnectedWatch'] = currentConnectedWatch == null ? null : currentConnectedWatch.encode();
    return pigeonMap;
  }

  static WatchConnectionStatePigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return WatchConnectionStatePigeon()
      ..isConnected = pigeonMap['isConnected'] as bool
      ..isConnecting = pigeonMap['isConnecting'] as bool
      ..currentWatchAddress = pigeonMap['currentWatchAddress'] as int
      ..currentConnectedWatch = pigeonMap['currentConnectedWatch'] != null ? PebbleDevicePigeon.decode(pigeonMap['currentConnectedWatch']) : null;
  }
}

class PebbleDevicePigeon {
  String name;
  int address;
  PebbleFirmwarePigeon runningFirmware;
  PebbleFirmwarePigeon recoveryFirmware;
  int model;
  int bootloaderTimestamp;
  String board;
  String serial;
  String language;
  int languageVersion;
  bool isUnfaithful;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['name'] = name;
    pigeonMap['address'] = address;
    pigeonMap['runningFirmware'] = runningFirmware == null ? null : runningFirmware.encode();
    pigeonMap['recoveryFirmware'] = recoveryFirmware == null ? null : recoveryFirmware.encode();
    pigeonMap['model'] = model;
    pigeonMap['bootloaderTimestamp'] = bootloaderTimestamp;
    pigeonMap['board'] = board;
    pigeonMap['serial'] = serial;
    pigeonMap['language'] = language;
    pigeonMap['languageVersion'] = languageVersion;
    pigeonMap['isUnfaithful'] = isUnfaithful;
    return pigeonMap;
  }

  static PebbleDevicePigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return PebbleDevicePigeon()
      ..name = pigeonMap['name'] as String
      ..address = pigeonMap['address'] as int
      ..runningFirmware = pigeonMap['runningFirmware'] != null ? PebbleFirmwarePigeon.decode(pigeonMap['runningFirmware']) : null
      ..recoveryFirmware = pigeonMap['recoveryFirmware'] != null ? PebbleFirmwarePigeon.decode(pigeonMap['recoveryFirmware']) : null
      ..model = pigeonMap['model'] as int
      ..bootloaderTimestamp = pigeonMap['bootloaderTimestamp'] as int
      ..board = pigeonMap['board'] as String
      ..serial = pigeonMap['serial'] as String
      ..language = pigeonMap['language'] as String
      ..languageVersion = pigeonMap['languageVersion'] as int
      ..isUnfaithful = pigeonMap['isUnfaithful'] as bool;
  }
}

class PebbleFirmwarePigeon {
  int timestamp;
  String version;
  String gitHash;
  bool isRecovery;
  int hardwarePlatform;
  int metadataVersion;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['timestamp'] = timestamp;
    pigeonMap['version'] = version;
    pigeonMap['gitHash'] = gitHash;
    pigeonMap['isRecovery'] = isRecovery;
    pigeonMap['hardwarePlatform'] = hardwarePlatform;
    pigeonMap['metadataVersion'] = metadataVersion;
    return pigeonMap;
  }

  static PebbleFirmwarePigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return PebbleFirmwarePigeon()
      ..timestamp = pigeonMap['timestamp'] as int
      ..version = pigeonMap['version'] as String
      ..gitHash = pigeonMap['gitHash'] as String
      ..isRecovery = pigeonMap['isRecovery'] as bool
      ..hardwarePlatform = pigeonMap['hardwarePlatform'] as int
      ..metadataVersion = pigeonMap['metadataVersion'] as int;
  }
}

class ActionResponsePigeon {
  bool success;
  String attributesJson;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['success'] = success;
    pigeonMap['attributesJson'] = attributesJson;
    return pigeonMap;
  }

  static ActionResponsePigeon decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return ActionResponsePigeon()
      ..success = pigeonMap['success'] as bool
      ..attributesJson = pigeonMap['attributesJson'] as String;
  }
}

class ActionTrigger {
  String itemId;
  int actionId;
  String attributesJson;

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['itemId'] = itemId;
    pigeonMap['actionId'] = actionId;
    pigeonMap['attributesJson'] = attributesJson;
    return pigeonMap;
  }

  static ActionTrigger decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return ActionTrigger()
      ..itemId = pigeonMap['itemId'] as String
      ..actionId = pigeonMap['actionId'] as int
      ..attributesJson = pigeonMap['attributesJson'] as String;
  }
}

class PigeonLogger {
  Future<void> v(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PigeonLogger.v', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> d(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PigeonLogger.d', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> i(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PigeonLogger.i', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> w(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PigeonLogger.w', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> e(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PigeonLogger.e', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class WorkaroundsControl {
  Future<ListWrapper> getNeededWorkarounds() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.WorkaroundsControl.getNeededWorkarounds', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return ListWrapper.decode(replyMap['result']);
    }
  }
}

class ScanControl {
  Future<void> startBleScan() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ScanControl.startBleScan', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> startClassicScan() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ScanControl.startClassicScan', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class IntentCallbacks {
  void openUri(StringWrapper arg);
  static void setup(IntentCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.IntentCallbacks.openUri', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.IntentCallbacks.openUri was null. Expected StringWrapper.');
          final StringWrapper input = StringWrapper.decode(message);
          api.openUri(input);
          return;
        });
      }
    }
  }
}

class TimelineControl {
  Future<NumberWrapper> addPin(TimelinePinPigeon arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.TimelineControl.addPin', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return NumberWrapper.decode(replyMap['result']);
    }
  }

  Future<NumberWrapper> removePin(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.TimelineControl.removePin', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return NumberWrapper.decode(replyMap['result']);
    }
  }

  Future<NumberWrapper> removeAllPins() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.TimelineControl.removeAllPins', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return NumberWrapper.decode(replyMap['result']);
    }
  }
}

class BackgroundControl {
  Future<void> notifyFlutterBackgroundStarted() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.BackgroundControl.notifyFlutterBackgroundStarted', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class PermissionControl {
  Future<NumberWrapper> requestLocationPermission() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionControl.requestLocationPermission', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return NumberWrapper.decode(replyMap['result']);
    }
  }

  Future<NumberWrapper> requestCalendarPermission() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionControl.requestCalendarPermission', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return NumberWrapper.decode(replyMap['result']);
    }
  }

  Future<void> requestNotificationAccess() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionControl.requestNotificationAccess', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> requestBatteryExclusion() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionControl.requestBatteryExclusion', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> openPermissionSettings() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionControl.openPermissionSettings', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class ConnectionControl {
  Future<BooleanWrapper> isConnected() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ConnectionControl.isConnected', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }

  Future<void> disconnect() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ConnectionControl.disconnect', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> sendRawPacket(ListWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ConnectionControl.sendRawPacket', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> observeConnectionChanges() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ConnectionControl.observeConnectionChanges', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> cancelObservingConnectionChanges() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.ConnectionControl.cancelObservingConnectionChanges', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class NotificationsControl {
  Future<void> sendTestNotification() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationsControl.sendTestNotification', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class BackgroundAppInstallCallbacks {
  void beginAppInstall(InstallData arg);
  static void setup(BackgroundAppInstallCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.BackgroundAppInstallCallbacks.beginAppInstall', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.BackgroundAppInstallCallbacks.beginAppInstall was null. Expected InstallData.');
          final InstallData input = InstallData.decode(message);
          api.beginAppInstall(input);
          return;
        });
      }
    }
  }
}

class BackgroundSetupControl {
  Future<void> setupBackground(NumberWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.BackgroundSetupControl.setupBackground', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class ScanCallbacks {
  void onScanUpdate(ListWrapper arg);
  void onScanStarted();
  void onScanStopped();
  static void setup(ScanCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.ScanCallbacks.onScanUpdate', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.ScanCallbacks.onScanUpdate was null. Expected ListWrapper.');
          final ListWrapper input = ListWrapper.decode(message);
          api.onScanUpdate(input);
          return;
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.ScanCallbacks.onScanStarted', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          // ignore message
          api.onScanStarted();
          return;
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.ScanCallbacks.onScanStopped', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          // ignore message
          api.onScanStopped();
          return;
        });
      }
    }
  }
}

class AppInstallControl {
  Future<PbwAppInfo> getAppInfo(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.AppInstallControl.getAppInfo', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return PbwAppInfo.decode(replyMap['result']);
    }
  }

  Future<void> beginAppInstall(InstallData arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.AppInstallControl.beginAppInstall', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class IntentControl {
  Future<void> notifyFlutterReadyForIntents() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.IntentControl.notifyFlutterReadyForIntents', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> notifyFlutterNotReadyForIntents() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.IntentControl.notifyFlutterNotReadyForIntents', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<BooleanWrapper> waitForBoot() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.IntentControl.waitForBoot', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }
}

class TimelineSyncControl {
  Future<void> syncTimelineToWatchLater() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.TimelineSyncControl.syncTimelineToWatchLater', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class NotificationListening {
  Future<TimelinePinPigeon> handleNotification(NotificationPigeon arg);
  void dismissNotification(StringWrapper arg);
  static void setup(NotificationListening api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationListening.handleNotification', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.NotificationListening.handleNotification was null. Expected NotificationPigeon.');
          final NotificationPigeon input = NotificationPigeon.decode(message);
          final TimelinePinPigeon output = await api.handleNotification(input);
          return output.encode();
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationListening.dismissNotification', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.NotificationListening.dismissNotification was null. Expected StringWrapper.');
          final StringWrapper input = StringWrapper.decode(message);
          api.dismissNotification(input);
          return;
        });
      }
    }
  }
}

class PackageDetails {
  Future<AppEntriesPigeon> getPackageList() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PackageDetails.getPackageList', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return AppEntriesPigeon.decode(replyMap['result']);
    }
  }
}

class NotificationUtils {
  Future<BooleanWrapper> dismissNotification(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationUtils.dismissNotification', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }

  Future<void> dismissNotificationWatch(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationUtils.dismissNotificationWatch', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> openNotification(StringWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationUtils.openNotification', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> executeAction(NotifActionExecuteReq arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.NotificationUtils.executeAction', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class KeepUnusedHack {
  Future<void> keepPebbleScanDevicePigeon(PebbleScanDevicePigeon arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.KeepUnusedHack.keepPebbleScanDevicePigeon', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> keepWatchResource(WatchResource arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.KeepUnusedHack.keepWatchResource', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class PairCallbacks {
  void onWatchPairComplete(NumberWrapper arg);
  static void setup(PairCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.PairCallbacks.onWatchPairComplete', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PairCallbacks.onWatchPairComplete was null. Expected NumberWrapper.');
          final NumberWrapper input = NumberWrapper.decode(message);
          api.onWatchPairComplete(input);
          return;
        });
      }
    }
  }
}

class CalendarControl {
  Future<void> requestCalendarSync() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.CalendarControl.requestCalendarSync', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> deleteCalendarPinsFromWatch() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.CalendarControl.deleteCalendarPinsFromWatch', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class PermissionCheck {
  Future<BooleanWrapper> hasLocationPermission() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionCheck.hasLocationPermission', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }

  Future<BooleanWrapper> hasCalendarPermission() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionCheck.hasCalendarPermission', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }

  Future<BooleanWrapper> hasNotificationAccess() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionCheck.hasNotificationAccess', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }

  Future<BooleanWrapper> hasBatteryExclusionEnabled() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.PermissionCheck.hasBatteryExclusionEnabled', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return BooleanWrapper.decode(replyMap['result']);
    }
  }
}

abstract class ConnectionCallbacks {
  void onWatchConnectionStateChanged(WatchConnectionStatePigeon arg);
  static void setup(ConnectionCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.ConnectionCallbacks.onWatchConnectionStateChanged', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.ConnectionCallbacks.onWatchConnectionStateChanged was null. Expected WatchConnectionStatePigeon.');
          final WatchConnectionStatePigeon input = WatchConnectionStatePigeon.decode(message);
          api.onWatchConnectionStateChanged(input);
          return;
        });
      }
    }
  }
}

abstract class TimelineCallbacks {
  void syncTimelineToWatch();
  Future<ActionResponsePigeon> handleTimelineAction(ActionTrigger arg);
  static void setup(TimelineCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.TimelineCallbacks.syncTimelineToWatch', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          // ignore message
          api.syncTimelineToWatch();
          return;
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.TimelineCallbacks.handleTimelineAction', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.TimelineCallbacks.handleTimelineAction was null. Expected ActionTrigger.');
          final ActionTrigger input = ActionTrigger.decode(message);
          final ActionResponsePigeon output = await api.handleTimelineAction(input);
          return output.encode();
        });
      }
    }
  }
}

abstract class CalendarCallbacks {
  Future<void> doFullCalendarSync();
  Future<void> deleteCalendarPinsFromWatch();
  static void setup(CalendarCallbacks api) {
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.CalendarCallbacks.doFullCalendarSync', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          // ignore message
          await api.doFullCalendarSync();
          return;
        });
      }
    }
    {
      const BasicMessageChannel<Object> channel =
          BasicMessageChannel<Object>('dev.flutter.pigeon.CalendarCallbacks.deleteCalendarPinsFromWatch', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object message) async {
          // ignore message
          await api.deleteCalendarPinsFromWatch();
          return;
        });
      }
    }
  }
}

class DebugControl {
  Future<void> collectLogs() async {
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.DebugControl.collectLogs', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class UiConnectionControl {
  Future<void> connectToWatch(NumberWrapper arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.UiConnectionControl.connectToWatch', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}
