// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.rebble.cobble.pigeons;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Pigeons {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StringWrapper {
    private String value;
    public String getValue() { return value; }
    public void setValue(String setterArg) { this.value = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static StringWrapper fromMap(HashMap map) {
      StringWrapper fromMapResult = new StringWrapper();
      Object value = map.get("value");
      fromMapResult.value = (String)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ListWrapper {
    private ArrayList value;
    public ArrayList getValue() { return value; }
    public void setValue(ArrayList setterArg) { this.value = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static ListWrapper fromMap(HashMap map) {
      ListWrapper fromMapResult = new ListWrapper();
      Object value = map.get("value");
      fromMapResult.value = (ArrayList)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NumberWrapper {
    private Long value;
    public Long getValue() { return value; }
    public void setValue(Long setterArg) { this.value = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static NumberWrapper fromMap(HashMap map) {
      NumberWrapper fromMapResult = new NumberWrapper();
      Object value = map.get("value");
      fromMapResult.value = (value == null) ? null : ((value instanceof Integer) ? (Integer)value : (Long)value);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TimelinePinPigeon {
    private String itemId;
    public String getItemId() { return itemId; }
    public void setItemId(String setterArg) { this.itemId = setterArg; }

    private String parentId;
    public String getParentId() { return parentId; }
    public void setParentId(String setterArg) { this.parentId = setterArg; }

    private Long timestamp;
    public Long getTimestamp() { return timestamp; }
    public void setTimestamp(Long setterArg) { this.timestamp = setterArg; }

    private Long type;
    public Long getType() { return type; }
    public void setType(Long setterArg) { this.type = setterArg; }

    private Long duration;
    public Long getDuration() { return duration; }
    public void setDuration(Long setterArg) { this.duration = setterArg; }

    private Boolean isVisible;
    public Boolean getIsVisible() { return isVisible; }
    public void setIsVisible(Boolean setterArg) { this.isVisible = setterArg; }

    private Boolean isFloating;
    public Boolean getIsFloating() { return isFloating; }
    public void setIsFloating(Boolean setterArg) { this.isFloating = setterArg; }

    private Boolean isAllDay;
    public Boolean getIsAllDay() { return isAllDay; }
    public void setIsAllDay(Boolean setterArg) { this.isAllDay = setterArg; }

    private Boolean persistQuickView;
    public Boolean getPersistQuickView() { return persistQuickView; }
    public void setPersistQuickView(Boolean setterArg) { this.persistQuickView = setterArg; }

    private Long layout;
    public Long getLayout() { return layout; }
    public void setLayout(Long setterArg) { this.layout = setterArg; }

    private String attributesJson;
    public String getAttributesJson() { return attributesJson; }
    public void setAttributesJson(String setterArg) { this.attributesJson = setterArg; }

    private String actionsJson;
    public String getActionsJson() { return actionsJson; }
    public void setActionsJson(String setterArg) { this.actionsJson = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("parentId", parentId);
      toMapResult.put("timestamp", timestamp);
      toMapResult.put("type", type);
      toMapResult.put("duration", duration);
      toMapResult.put("isVisible", isVisible);
      toMapResult.put("isFloating", isFloating);
      toMapResult.put("isAllDay", isAllDay);
      toMapResult.put("persistQuickView", persistQuickView);
      toMapResult.put("layout", layout);
      toMapResult.put("attributesJson", attributesJson);
      toMapResult.put("actionsJson", actionsJson);
      return toMapResult;
    }
    static TimelinePinPigeon fromMap(HashMap map) {
      TimelinePinPigeon fromMapResult = new TimelinePinPigeon();
      Object itemId = map.get("itemId");
      fromMapResult.itemId = (String)itemId;
      Object parentId = map.get("parentId");
      fromMapResult.parentId = (String)parentId;
      Object timestamp = map.get("timestamp");
      fromMapResult.timestamp = (timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp);
      Object type = map.get("type");
      fromMapResult.type = (type == null) ? null : ((type instanceof Integer) ? (Integer)type : (Long)type);
      Object duration = map.get("duration");
      fromMapResult.duration = (duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration);
      Object isVisible = map.get("isVisible");
      fromMapResult.isVisible = (Boolean)isVisible;
      Object isFloating = map.get("isFloating");
      fromMapResult.isFloating = (Boolean)isFloating;
      Object isAllDay = map.get("isAllDay");
      fromMapResult.isAllDay = (Boolean)isAllDay;
      Object persistQuickView = map.get("persistQuickView");
      fromMapResult.persistQuickView = (Boolean)persistQuickView;
      Object layout = map.get("layout");
      fromMapResult.layout = (layout == null) ? null : ((layout instanceof Integer) ? (Integer)layout : (Long)layout);
      Object attributesJson = map.get("attributesJson");
      fromMapResult.attributesJson = (String)attributesJson;
      Object actionsJson = map.get("actionsJson");
      fromMapResult.actionsJson = (String)actionsJson;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BooleanWrapper {
    private Boolean value;
    public Boolean getValue() { return value; }
    public void setValue(Boolean setterArg) { this.value = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static BooleanWrapper fromMap(HashMap map) {
      BooleanWrapper fromMapResult = new BooleanWrapper();
      Object value = map.get("value");
      fromMapResult.value = (Boolean)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InstallData {
    private String uri;
    public String getUri() { return uri; }
    public void setUri(String setterArg) { this.uri = setterArg; }

    private PbwAppInfo appInfo;
    public PbwAppInfo getAppInfo() { return appInfo; }
    public void setAppInfo(PbwAppInfo setterArg) { this.appInfo = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uri", uri);
      toMapResult.put("appInfo", appInfo.toMap());
      return toMapResult;
    }
    static InstallData fromMap(HashMap map) {
      InstallData fromMapResult = new InstallData();
      Object uri = map.get("uri");
      fromMapResult.uri = (String)uri;
      Object appInfo = map.get("appInfo");
      fromMapResult.appInfo = PbwAppInfo.fromMap((HashMap)appInfo);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PbwAppInfo {
    private Boolean isValid;
    public Boolean getIsValid() { return isValid; }
    public void setIsValid(Boolean setterArg) { this.isValid = setterArg; }

    private String uuid;
    public String getUuid() { return uuid; }
    public void setUuid(String setterArg) { this.uuid = setterArg; }

    private String shortName;
    public String getShortName() { return shortName; }
    public void setShortName(String setterArg) { this.shortName = setterArg; }

    private String longName;
    public String getLongName() { return longName; }
    public void setLongName(String setterArg) { this.longName = setterArg; }

    private String companyName;
    public String getCompanyName() { return companyName; }
    public void setCompanyName(String setterArg) { this.companyName = setterArg; }

    private Long versionCode;
    public Long getVersionCode() { return versionCode; }
    public void setVersionCode(Long setterArg) { this.versionCode = setterArg; }

    private String versionLabel;
    public String getVersionLabel() { return versionLabel; }
    public void setVersionLabel(String setterArg) { this.versionLabel = setterArg; }

    private HashMap appKeys;
    public HashMap getAppKeys() { return appKeys; }
    public void setAppKeys(HashMap setterArg) { this.appKeys = setterArg; }

    private ArrayList capabilities;
    public ArrayList getCapabilities() { return capabilities; }
    public void setCapabilities(ArrayList setterArg) { this.capabilities = setterArg; }

    private ArrayList resources;
    public ArrayList getResources() { return resources; }
    public void setResources(ArrayList setterArg) { this.resources = setterArg; }

    private String sdkVersion;
    public String getSdkVersion() { return sdkVersion; }
    public void setSdkVersion(String setterArg) { this.sdkVersion = setterArg; }

    private ArrayList targetPlatforms;
    public ArrayList getTargetPlatforms() { return targetPlatforms; }
    public void setTargetPlatforms(ArrayList setterArg) { this.targetPlatforms = setterArg; }

    private WatchappInfo watchapp;
    public WatchappInfo getWatchapp() { return watchapp; }
    public void setWatchapp(WatchappInfo setterArg) { this.watchapp = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isValid", isValid);
      toMapResult.put("uuid", uuid);
      toMapResult.put("shortName", shortName);
      toMapResult.put("longName", longName);
      toMapResult.put("companyName", companyName);
      toMapResult.put("versionCode", versionCode);
      toMapResult.put("versionLabel", versionLabel);
      toMapResult.put("appKeys", appKeys);
      toMapResult.put("capabilities", capabilities);
      toMapResult.put("resources", resources);
      toMapResult.put("sdkVersion", sdkVersion);
      toMapResult.put("targetPlatforms", targetPlatforms);
      toMapResult.put("watchapp", watchapp.toMap());
      return toMapResult;
    }
    static PbwAppInfo fromMap(HashMap map) {
      PbwAppInfo fromMapResult = new PbwAppInfo();
      Object isValid = map.get("isValid");
      fromMapResult.isValid = (Boolean)isValid;
      Object uuid = map.get("uuid");
      fromMapResult.uuid = (String)uuid;
      Object shortName = map.get("shortName");
      fromMapResult.shortName = (String)shortName;
      Object longName = map.get("longName");
      fromMapResult.longName = (String)longName;
      Object companyName = map.get("companyName");
      fromMapResult.companyName = (String)companyName;
      Object versionCode = map.get("versionCode");
      fromMapResult.versionCode = (versionCode == null) ? null : ((versionCode instanceof Integer) ? (Integer)versionCode : (Long)versionCode);
      Object versionLabel = map.get("versionLabel");
      fromMapResult.versionLabel = (String)versionLabel;
      Object appKeys = map.get("appKeys");
      fromMapResult.appKeys = (HashMap)appKeys;
      Object capabilities = map.get("capabilities");
      fromMapResult.capabilities = (ArrayList)capabilities;
      Object resources = map.get("resources");
      fromMapResult.resources = (ArrayList)resources;
      Object sdkVersion = map.get("sdkVersion");
      fromMapResult.sdkVersion = (String)sdkVersion;
      Object targetPlatforms = map.get("targetPlatforms");
      fromMapResult.targetPlatforms = (ArrayList)targetPlatforms;
      Object watchapp = map.get("watchapp");
      fromMapResult.watchapp = WatchappInfo.fromMap((HashMap)watchapp);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WatchappInfo {
    private Boolean watchface;
    public Boolean getWatchface() { return watchface; }
    public void setWatchface(Boolean setterArg) { this.watchface = setterArg; }

    private Boolean hiddenApp;
    public Boolean getHiddenApp() { return hiddenApp; }
    public void setHiddenApp(Boolean setterArg) { this.hiddenApp = setterArg; }

    private Boolean onlyShownOnCommunication;
    public Boolean getOnlyShownOnCommunication() { return onlyShownOnCommunication; }
    public void setOnlyShownOnCommunication(Boolean setterArg) { this.onlyShownOnCommunication = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("watchface", watchface);
      toMapResult.put("hiddenApp", hiddenApp);
      toMapResult.put("onlyShownOnCommunication", onlyShownOnCommunication);
      return toMapResult;
    }
    static WatchappInfo fromMap(HashMap map) {
      WatchappInfo fromMapResult = new WatchappInfo();
      Object watchface = map.get("watchface");
      fromMapResult.watchface = (Boolean)watchface;
      Object hiddenApp = map.get("hiddenApp");
      fromMapResult.hiddenApp = (Boolean)hiddenApp;
      Object onlyShownOnCommunication = map.get("onlyShownOnCommunication");
      fromMapResult.onlyShownOnCommunication = (Boolean)onlyShownOnCommunication;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotificationPigeon {
    private String packageId;
    public String getPackageId() { return packageId; }
    public void setPackageId(String setterArg) { this.packageId = setterArg; }

    private Long notifId;
    public Long getNotifId() { return notifId; }
    public void setNotifId(Long setterArg) { this.notifId = setterArg; }

    private String appName;
    public String getAppName() { return appName; }
    public void setAppName(String setterArg) { this.appName = setterArg; }

    private String tagId;
    public String getTagId() { return tagId; }
    public void setTagId(String setterArg) { this.tagId = setterArg; }

    private String tagName;
    public String getTagName() { return tagName; }
    public void setTagName(String setterArg) { this.tagName = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String text;
    public String getText() { return text; }
    public void setText(String setterArg) { this.text = setterArg; }

    private String category;
    public String getCategory() { return category; }
    public void setCategory(String setterArg) { this.category = setterArg; }

    private Long color;
    public Long getColor() { return color; }
    public void setColor(Long setterArg) { this.color = setterArg; }

    private String messagesJson;
    public String getMessagesJson() { return messagesJson; }
    public void setMessagesJson(String setterArg) { this.messagesJson = setterArg; }

    private String actionsJson;
    public String getActionsJson() { return actionsJson; }
    public void setActionsJson(String setterArg) { this.actionsJson = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("packageId", packageId);
      toMapResult.put("notifId", notifId);
      toMapResult.put("appName", appName);
      toMapResult.put("tagId", tagId);
      toMapResult.put("tagName", tagName);
      toMapResult.put("title", title);
      toMapResult.put("text", text);
      toMapResult.put("category", category);
      toMapResult.put("color", color);
      toMapResult.put("messagesJson", messagesJson);
      toMapResult.put("actionsJson", actionsJson);
      return toMapResult;
    }
    static NotificationPigeon fromMap(HashMap map) {
      NotificationPigeon fromMapResult = new NotificationPigeon();
      Object packageId = map.get("packageId");
      fromMapResult.packageId = (String)packageId;
      Object notifId = map.get("notifId");
      fromMapResult.notifId = (notifId == null) ? null : ((notifId instanceof Integer) ? (Integer)notifId : (Long)notifId);
      Object appName = map.get("appName");
      fromMapResult.appName = (String)appName;
      Object tagId = map.get("tagId");
      fromMapResult.tagId = (String)tagId;
      Object tagName = map.get("tagName");
      fromMapResult.tagName = (String)tagName;
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object text = map.get("text");
      fromMapResult.text = (String)text;
      Object category = map.get("category");
      fromMapResult.category = (String)category;
      Object color = map.get("color");
      fromMapResult.color = (color == null) ? null : ((color instanceof Integer) ? (Integer)color : (Long)color);
      Object messagesJson = map.get("messagesJson");
      fromMapResult.messagesJson = (String)messagesJson;
      Object actionsJson = map.get("actionsJson");
      fromMapResult.actionsJson = (String)actionsJson;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppEntriesPigeon {
    private ArrayList appName;
    public ArrayList getAppName() { return appName; }
    public void setAppName(ArrayList setterArg) { this.appName = setterArg; }

    private ArrayList packageId;
    public ArrayList getPackageId() { return packageId; }
    public void setPackageId(ArrayList setterArg) { this.packageId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("appName", appName);
      toMapResult.put("packageId", packageId);
      return toMapResult;
    }
    static AppEntriesPigeon fromMap(HashMap map) {
      AppEntriesPigeon fromMapResult = new AppEntriesPigeon();
      Object appName = map.get("appName");
      fromMapResult.appName = (ArrayList)appName;
      Object packageId = map.get("packageId");
      fromMapResult.packageId = (ArrayList)packageId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotifActionExecuteReq {
    private String itemId;
    public String getItemId() { return itemId; }
    public void setItemId(String setterArg) { this.itemId = setterArg; }

    private Long actionId;
    public Long getActionId() { return actionId; }
    public void setActionId(Long setterArg) { this.actionId = setterArg; }

    private String responseText;
    public String getResponseText() { return responseText; }
    public void setResponseText(String setterArg) { this.responseText = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("actionId", actionId);
      toMapResult.put("responseText", responseText);
      return toMapResult;
    }
    static NotifActionExecuteReq fromMap(HashMap map) {
      NotifActionExecuteReq fromMapResult = new NotifActionExecuteReq();
      Object itemId = map.get("itemId");
      fromMapResult.itemId = (String)itemId;
      Object actionId = map.get("actionId");
      fromMapResult.actionId = (actionId == null) ? null : ((actionId instanceof Integer) ? (Integer)actionId : (Long)actionId);
      Object responseText = map.get("responseText");
      fromMapResult.responseText = (String)responseText;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PebbleScanDevicePigeon {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private Long address;
    public Long getAddress() { return address; }
    public void setAddress(Long setterArg) { this.address = setterArg; }

    private String version;
    public String getVersion() { return version; }
    public void setVersion(String setterArg) { this.version = setterArg; }

    private String serialNumber;
    public String getSerialNumber() { return serialNumber; }
    public void setSerialNumber(String setterArg) { this.serialNumber = setterArg; }

    private Long color;
    public Long getColor() { return color; }
    public void setColor(Long setterArg) { this.color = setterArg; }

    private Boolean runningPRF;
    public Boolean getRunningPRF() { return runningPRF; }
    public void setRunningPRF(Boolean setterArg) { this.runningPRF = setterArg; }

    private Boolean firstUse;
    public Boolean getFirstUse() { return firstUse; }
    public void setFirstUse(Boolean setterArg) { this.firstUse = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("address", address);
      toMapResult.put("version", version);
      toMapResult.put("serialNumber", serialNumber);
      toMapResult.put("color", color);
      toMapResult.put("runningPRF", runningPRF);
      toMapResult.put("firstUse", firstUse);
      return toMapResult;
    }
    static PebbleScanDevicePigeon fromMap(HashMap map) {
      PebbleScanDevicePigeon fromMapResult = new PebbleScanDevicePigeon();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object address = map.get("address");
      fromMapResult.address = (address == null) ? null : ((address instanceof Integer) ? (Integer)address : (Long)address);
      Object version = map.get("version");
      fromMapResult.version = (String)version;
      Object serialNumber = map.get("serialNumber");
      fromMapResult.serialNumber = (String)serialNumber;
      Object color = map.get("color");
      fromMapResult.color = (color == null) ? null : ((color instanceof Integer) ? (Integer)color : (Long)color);
      Object runningPRF = map.get("runningPRF");
      fromMapResult.runningPRF = (Boolean)runningPRF;
      Object firstUse = map.get("firstUse");
      fromMapResult.firstUse = (Boolean)firstUse;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WatchResource {
    private String file;
    public String getFile() { return file; }
    public void setFile(String setterArg) { this.file = setterArg; }

    private Boolean menuIcon;
    public Boolean getMenuIcon() { return menuIcon; }
    public void setMenuIcon(Boolean setterArg) { this.menuIcon = setterArg; }

    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("file", file);
      toMapResult.put("menuIcon", menuIcon);
      toMapResult.put("name", name);
      toMapResult.put("type", type);
      return toMapResult;
    }
    static WatchResource fromMap(HashMap map) {
      WatchResource fromMapResult = new WatchResource();
      Object file = map.get("file");
      fromMapResult.file = (String)file;
      Object menuIcon = map.get("menuIcon");
      fromMapResult.menuIcon = (Boolean)menuIcon;
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WatchConnectionStatePigeon {
    private Boolean isConnected;
    public Boolean getIsConnected() { return isConnected; }
    public void setIsConnected(Boolean setterArg) { this.isConnected = setterArg; }

    private Boolean isConnecting;
    public Boolean getIsConnecting() { return isConnecting; }
    public void setIsConnecting(Boolean setterArg) { this.isConnecting = setterArg; }

    private Long currentWatchAddress;
    public Long getCurrentWatchAddress() { return currentWatchAddress; }
    public void setCurrentWatchAddress(Long setterArg) { this.currentWatchAddress = setterArg; }

    private PebbleDevicePigeon currentConnectedWatch;
    public PebbleDevicePigeon getCurrentConnectedWatch() { return currentConnectedWatch; }
    public void setCurrentConnectedWatch(PebbleDevicePigeon setterArg) { this.currentConnectedWatch = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isConnected", isConnected);
      toMapResult.put("isConnecting", isConnecting);
      toMapResult.put("currentWatchAddress", currentWatchAddress);
      toMapResult.put("currentConnectedWatch", currentConnectedWatch.toMap());
      return toMapResult;
    }
    static WatchConnectionStatePigeon fromMap(HashMap map) {
      WatchConnectionStatePigeon fromMapResult = new WatchConnectionStatePigeon();
      Object isConnected = map.get("isConnected");
      fromMapResult.isConnected = (Boolean)isConnected;
      Object isConnecting = map.get("isConnecting");
      fromMapResult.isConnecting = (Boolean)isConnecting;
      Object currentWatchAddress = map.get("currentWatchAddress");
      fromMapResult.currentWatchAddress = (currentWatchAddress == null) ? null : ((currentWatchAddress instanceof Integer) ? (Integer)currentWatchAddress : (Long)currentWatchAddress);
      Object currentConnectedWatch = map.get("currentConnectedWatch");
      fromMapResult.currentConnectedWatch = PebbleDevicePigeon.fromMap((HashMap)currentConnectedWatch);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PebbleDevicePigeon {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private Long address;
    public Long getAddress() { return address; }
    public void setAddress(Long setterArg) { this.address = setterArg; }

    private PebbleFirmwarePigeon runningFirmware;
    public PebbleFirmwarePigeon getRunningFirmware() { return runningFirmware; }
    public void setRunningFirmware(PebbleFirmwarePigeon setterArg) { this.runningFirmware = setterArg; }

    private PebbleFirmwarePigeon recoveryFirmware;
    public PebbleFirmwarePigeon getRecoveryFirmware() { return recoveryFirmware; }
    public void setRecoveryFirmware(PebbleFirmwarePigeon setterArg) { this.recoveryFirmware = setterArg; }

    private Long model;
    public Long getModel() { return model; }
    public void setModel(Long setterArg) { this.model = setterArg; }

    private Long bootloaderTimestamp;
    public Long getBootloaderTimestamp() { return bootloaderTimestamp; }
    public void setBootloaderTimestamp(Long setterArg) { this.bootloaderTimestamp = setterArg; }

    private String board;
    public String getBoard() { return board; }
    public void setBoard(String setterArg) { this.board = setterArg; }

    private String serial;
    public String getSerial() { return serial; }
    public void setSerial(String setterArg) { this.serial = setterArg; }

    private String language;
    public String getLanguage() { return language; }
    public void setLanguage(String setterArg) { this.language = setterArg; }

    private Long languageVersion;
    public Long getLanguageVersion() { return languageVersion; }
    public void setLanguageVersion(Long setterArg) { this.languageVersion = setterArg; }

    private Boolean isUnfaithful;
    public Boolean getIsUnfaithful() { return isUnfaithful; }
    public void setIsUnfaithful(Boolean setterArg) { this.isUnfaithful = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("address", address);
      toMapResult.put("runningFirmware", runningFirmware.toMap());
      toMapResult.put("recoveryFirmware", recoveryFirmware.toMap());
      toMapResult.put("model", model);
      toMapResult.put("bootloaderTimestamp", bootloaderTimestamp);
      toMapResult.put("board", board);
      toMapResult.put("serial", serial);
      toMapResult.put("language", language);
      toMapResult.put("languageVersion", languageVersion);
      toMapResult.put("isUnfaithful", isUnfaithful);
      return toMapResult;
    }
    static PebbleDevicePigeon fromMap(HashMap map) {
      PebbleDevicePigeon fromMapResult = new PebbleDevicePigeon();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object address = map.get("address");
      fromMapResult.address = (address == null) ? null : ((address instanceof Integer) ? (Integer)address : (Long)address);
      Object runningFirmware = map.get("runningFirmware");
      fromMapResult.runningFirmware = PebbleFirmwarePigeon.fromMap((HashMap)runningFirmware);
      Object recoveryFirmware = map.get("recoveryFirmware");
      fromMapResult.recoveryFirmware = PebbleFirmwarePigeon.fromMap((HashMap)recoveryFirmware);
      Object model = map.get("model");
      fromMapResult.model = (model == null) ? null : ((model instanceof Integer) ? (Integer)model : (Long)model);
      Object bootloaderTimestamp = map.get("bootloaderTimestamp");
      fromMapResult.bootloaderTimestamp = (bootloaderTimestamp == null) ? null : ((bootloaderTimestamp instanceof Integer) ? (Integer)bootloaderTimestamp : (Long)bootloaderTimestamp);
      Object board = map.get("board");
      fromMapResult.board = (String)board;
      Object serial = map.get("serial");
      fromMapResult.serial = (String)serial;
      Object language = map.get("language");
      fromMapResult.language = (String)language;
      Object languageVersion = map.get("languageVersion");
      fromMapResult.languageVersion = (languageVersion == null) ? null : ((languageVersion instanceof Integer) ? (Integer)languageVersion : (Long)languageVersion);
      Object isUnfaithful = map.get("isUnfaithful");
      fromMapResult.isUnfaithful = (Boolean)isUnfaithful;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PebbleFirmwarePigeon {
    private Long timestamp;
    public Long getTimestamp() { return timestamp; }
    public void setTimestamp(Long setterArg) { this.timestamp = setterArg; }

    private String version;
    public String getVersion() { return version; }
    public void setVersion(String setterArg) { this.version = setterArg; }

    private String gitHash;
    public String getGitHash() { return gitHash; }
    public void setGitHash(String setterArg) { this.gitHash = setterArg; }

    private Boolean isRecovery;
    public Boolean getIsRecovery() { return isRecovery; }
    public void setIsRecovery(Boolean setterArg) { this.isRecovery = setterArg; }

    private Long hardwarePlatform;
    public Long getHardwarePlatform() { return hardwarePlatform; }
    public void setHardwarePlatform(Long setterArg) { this.hardwarePlatform = setterArg; }

    private Long metadataVersion;
    public Long getMetadataVersion() { return metadataVersion; }
    public void setMetadataVersion(Long setterArg) { this.metadataVersion = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timestamp", timestamp);
      toMapResult.put("version", version);
      toMapResult.put("gitHash", gitHash);
      toMapResult.put("isRecovery", isRecovery);
      toMapResult.put("hardwarePlatform", hardwarePlatform);
      toMapResult.put("metadataVersion", metadataVersion);
      return toMapResult;
    }
    static PebbleFirmwarePigeon fromMap(HashMap map) {
      PebbleFirmwarePigeon fromMapResult = new PebbleFirmwarePigeon();
      Object timestamp = map.get("timestamp");
      fromMapResult.timestamp = (timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp);
      Object version = map.get("version");
      fromMapResult.version = (String)version;
      Object gitHash = map.get("gitHash");
      fromMapResult.gitHash = (String)gitHash;
      Object isRecovery = map.get("isRecovery");
      fromMapResult.isRecovery = (Boolean)isRecovery;
      Object hardwarePlatform = map.get("hardwarePlatform");
      fromMapResult.hardwarePlatform = (hardwarePlatform == null) ? null : ((hardwarePlatform instanceof Integer) ? (Integer)hardwarePlatform : (Long)hardwarePlatform);
      Object metadataVersion = map.get("metadataVersion");
      fromMapResult.metadataVersion = (metadataVersion == null) ? null : ((metadataVersion instanceof Integer) ? (Integer)metadataVersion : (Long)metadataVersion);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ActionResponsePigeon {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private String attributesJson;
    public String getAttributesJson() { return attributesJson; }
    public void setAttributesJson(String setterArg) { this.attributesJson = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("attributesJson", attributesJson);
      return toMapResult;
    }
    static ActionResponsePigeon fromMap(HashMap map) {
      ActionResponsePigeon fromMapResult = new ActionResponsePigeon();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object attributesJson = map.get("attributesJson");
      fromMapResult.attributesJson = (String)attributesJson;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ActionTrigger {
    private String itemId;
    public String getItemId() { return itemId; }
    public void setItemId(String setterArg) { this.itemId = setterArg; }

    private Long actionId;
    public Long getActionId() { return actionId; }
    public void setActionId(Long setterArg) { this.actionId = setterArg; }

    private String attributesJson;
    public String getAttributesJson() { return attributesJson; }
    public void setAttributesJson(String setterArg) { this.attributesJson = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("actionId", actionId);
      toMapResult.put("attributesJson", attributesJson);
      return toMapResult;
    }
    static ActionTrigger fromMap(HashMap map) {
      ActionTrigger fromMapResult = new ActionTrigger();
      Object itemId = map.get("itemId");
      fromMapResult.itemId = (String)itemId;
      Object actionId = map.get("actionId");
      fromMapResult.actionId = (actionId == null) ? null : ((actionId instanceof Integer) ? (Integer)actionId : (Long)actionId);
      Object attributesJson = map.get("attributesJson");
      fromMapResult.attributesJson = (String)attributesJson;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PigeonLogger {
    void v(StringWrapper arg);
    void d(StringWrapper arg);
    void i(StringWrapper arg);
    void w(StringWrapper arg);
    void e(StringWrapper arg);

    /** Sets up an instance of `PigeonLogger` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, PigeonLogger api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.v", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.v(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.d", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.d(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.i", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.i(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.w", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.w(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.e", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.e(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface WorkaroundsControl {
    ListWrapper getNeededWorkarounds();

    /** Sets up an instance of `WorkaroundsControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, WorkaroundsControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WorkaroundsControl.getNeededWorkarounds", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              ListWrapper output = api.getNeededWorkarounds();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ScanControl {
    void startBleScan();
    void startClassicScan();

    /** Sets up an instance of `ScanControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, ScanControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanControl.startBleScan", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.startBleScan();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanControl.startClassicScan", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.startClassicScan();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class IntentCallbacks {
    private final BinaryMessenger binaryMessenger;
    public IntentCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void openUri(StringWrapper argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentCallbacks.openUri", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TimelineControl {
    NumberWrapper addPin(TimelinePinPigeon arg);
    NumberWrapper removePin(StringWrapper arg);
    NumberWrapper removeAllPins();

    /** Sets up an instance of `TimelineControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, TimelineControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineControl.addPin", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TimelinePinPigeon input = TimelinePinPigeon.fromMap((HashMap)message);
              NumberWrapper output = api.addPin(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineControl.removePin", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              NumberWrapper output = api.removePin(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineControl.removeAllPins", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              NumberWrapper output = api.removeAllPins();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BackgroundControl {
    void notifyFlutterBackgroundStarted();

    /** Sets up an instance of `BackgroundControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, BackgroundControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundControl.notifyFlutterBackgroundStarted", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.notifyFlutterBackgroundStarted();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PermissionControl {
    NumberWrapper requestLocationPermission();
    NumberWrapper requestCalendarPermission();
    void requestNotificationAccess();
    void requestBatteryExclusion();
    void openPermissionSettings();

    /** Sets up an instance of `PermissionControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, PermissionControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestLocationPermission", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              NumberWrapper output = api.requestLocationPermission();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestCalendarPermission", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              NumberWrapper output = api.requestCalendarPermission();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestNotificationAccess", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.requestNotificationAccess();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestBatteryExclusion", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.requestBatteryExclusion();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.openPermissionSettings", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.openPermissionSettings();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConnectionControl {
    BooleanWrapper isConnected();
    void disconnect();
    void sendRawPacket(ListWrapper arg);
    void observeConnectionChanges();
    void cancelObservingConnectionChanges();

    /** Sets up an instance of `ConnectionControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, ConnectionControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.isConnected", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.isConnected();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.disconnect", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.disconnect();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.sendRawPacket", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ListWrapper input = ListWrapper.fromMap((HashMap)message);
              api.sendRawPacket(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.observeConnectionChanges", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.observeConnectionChanges();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.cancelObservingConnectionChanges", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.cancelObservingConnectionChanges();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NotificationsControl {
    void sendTestNotification();

    /** Sets up an instance of `NotificationsControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, NotificationsControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationsControl.sendTestNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.sendTestNotification();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class BackgroundAppInstallCallbacks {
    private final BinaryMessenger binaryMessenger;
    public BackgroundAppInstallCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void beginAppInstall(InstallData argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundAppInstallCallbacks.beginAppInstall", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BackgroundSetupControl {
    void setupBackground(NumberWrapper arg);

    /** Sets up an instance of `BackgroundSetupControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, BackgroundSetupControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundSetupControl.setupBackground", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              NumberWrapper input = NumberWrapper.fromMap((HashMap)message);
              api.setupBackground(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ScanCallbacks {
    private final BinaryMessenger binaryMessenger;
    public ScanCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void onScanUpdate(ListWrapper argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanCallbacks.onScanUpdate", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onScanStarted(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanCallbacks.onScanStarted", new StandardMessageCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onScanStopped(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanCallbacks.onScanStopped", new StandardMessageCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }

  public interface Result<T> {
    void success(T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppInstallControl {
    void getAppInfo(StringWrapper arg, Result<PbwAppInfo> result);
    void beginAppInstall(InstallData arg);

    /** Sets up an instance of `AppInstallControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, AppInstallControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.getAppInfo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.getAppInfo(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.beginAppInstall", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              InstallData input = InstallData.fromMap((HashMap)message);
              api.beginAppInstall(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface IntentControl {
    void notifyFlutterReadyForIntents();
    void notifyFlutterNotReadyForIntents();
    BooleanWrapper waitForBoot();

    /** Sets up an instance of `IntentControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, IntentControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentControl.notifyFlutterReadyForIntents", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.notifyFlutterReadyForIntents();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentControl.notifyFlutterNotReadyForIntents", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.notifyFlutterNotReadyForIntents();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentControl.waitForBoot", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.waitForBoot();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TimelineSyncControl {
    void syncTimelineToWatchLater();

    /** Sets up an instance of `TimelineSyncControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, TimelineSyncControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineSyncControl.syncTimelineToWatchLater", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.syncTimelineToWatchLater();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class NotificationListening {
    private final BinaryMessenger binaryMessenger;
    public NotificationListening(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void handleNotification(NotificationPigeon argInput, Reply<TimelinePinPigeon> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationListening.handleNotification", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        HashMap outputMap = (HashMap)channelReply;
        @SuppressWarnings("ConstantConditions")
        TimelinePinPigeon output = TimelinePinPigeon.fromMap(outputMap);
        callback.reply(output);
      });
    }
    public void dismissNotification(StringWrapper argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationListening.dismissNotification", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PackageDetails {
    AppEntriesPigeon getPackageList();

    /** Sets up an instance of `PackageDetails` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, PackageDetails api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PackageDetails.getPackageList", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              AppEntriesPigeon output = api.getPackageList();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  
  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NotificationUtils {
    void dismissNotification(StringWrapper arg, Result<BooleanWrapper> result);
    void dismissNotificationWatch(StringWrapper arg);
    void openNotification(StringWrapper arg);
    void executeAction(NotifActionExecuteReq arg);

    /** Sets up an instance of `NotificationUtils` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, NotificationUtils api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.dismissNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.dismissNotification(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.dismissNotificationWatch", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.dismissNotificationWatch(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.openNotification", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringWrapper input = StringWrapper.fromMap((HashMap)message);
              api.openNotification(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.executeAction", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              NotifActionExecuteReq input = NotifActionExecuteReq.fromMap((HashMap)message);
              api.executeAction(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface KeepUnusedHack {
    void keepPebbleScanDevicePigeon(PebbleScanDevicePigeon arg);
    void keepWatchResource(WatchResource arg);

    /** Sets up an instance of `KeepUnusedHack` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, KeepUnusedHack api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.KeepUnusedHack.keepPebbleScanDevicePigeon", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PebbleScanDevicePigeon input = PebbleScanDevicePigeon.fromMap((HashMap)message);
              api.keepPebbleScanDevicePigeon(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.KeepUnusedHack.keepWatchResource", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              WatchResource input = WatchResource.fromMap((HashMap)message);
              api.keepWatchResource(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PairCallbacks {
    private final BinaryMessenger binaryMessenger;
    public PairCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void onWatchPairComplete(NumberWrapper argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PairCallbacks.onWatchPairComplete", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CalendarControl {
    void requestCalendarSync();
    void deleteCalendarPinsFromWatch();

    /** Sets up an instance of `CalendarControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, CalendarControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CalendarControl.requestCalendarSync", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.requestCalendarSync();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CalendarControl.deleteCalendarPinsFromWatch", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.deleteCalendarPinsFromWatch();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PermissionCheck {
    BooleanWrapper hasLocationPermission();
    BooleanWrapper hasCalendarPermission();
    BooleanWrapper hasNotificationAccess();
    BooleanWrapper hasBatteryExclusionEnabled();

    /** Sets up an instance of `PermissionCheck` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, PermissionCheck api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasLocationPermission", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasLocationPermission();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasCalendarPermission", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasCalendarPermission();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasNotificationAccess", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasNotificationAccess();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasBatteryExclusionEnabled", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasBatteryExclusionEnabled();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ConnectionCallbacks {
    private final BinaryMessenger binaryMessenger;
    public ConnectionCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void onWatchConnectionStateChanged(WatchConnectionStatePigeon argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionCallbacks.onWatchConnectionStateChanged", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class TimelineCallbacks {
    private final BinaryMessenger binaryMessenger;
    public TimelineCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void syncTimelineToWatch(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineCallbacks.syncTimelineToWatch", new StandardMessageCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void handleTimelineAction(ActionTrigger argInput, Reply<ActionResponsePigeon> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineCallbacks.handleTimelineAction", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        HashMap outputMap = (HashMap)channelReply;
        @SuppressWarnings("ConstantConditions")
        ActionResponsePigeon output = ActionResponsePigeon.fromMap(outputMap);
        callback.reply(output);
      });
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class CalendarCallbacks {
    private final BinaryMessenger binaryMessenger;
    public CalendarCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void doFullCalendarSync(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CalendarCallbacks.doFullCalendarSync", new StandardMessageCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void deleteCalendarPinsFromWatch(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CalendarCallbacks.deleteCalendarPinsFromWatch", new StandardMessageCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DebugControl {
    void collectLogs();

    /** Sets up an instance of `DebugControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, DebugControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DebugControl.collectLogs", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.collectLogs();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface UiConnectionControl {
    void connectToWatch(NumberWrapper arg);

    /** Sets up an instance of `UiConnectionControl` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, UiConnectionControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UiConnectionControl.connectToWatch", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              NumberWrapper input = NumberWrapper.fromMap((HashMap)message);
              api.connectToWatch(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
